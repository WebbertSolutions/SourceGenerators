#pragma warning disable CS8625 // Cannot convert null literal to non-nullable reference type.
#nullable disable

// ================================================================================
// <auto-generated>
//
//  This code was generated by a Source Code Generator
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//
// </auto-generated>
// ================================================================================

using WS.Gen.ObjectMother;

namespace RandomTestDataApp.Generator;


public partial class PostalAddressBuilder : Builder<PostalAddress>
{
	private Lazy<int> _address1 = new (default(int));
	private Lazy<string> _address2 = new (default(string));
	private Lazy<string> _city = new (default(string));
	private Lazy<int> _stateId = new (default(int));
	private Lazy<string> _postalCode = new (default(string));
	private Lazy<List<string>> _people = new (default(List<string>));


    public override PostalAddress Build()
    {
        if (BuilderObject?.IsValueCreated != true)
        {
            BuilderObject = new Lazy<PostalAddress>(new PostalAddress
            {
				Address1 = _address1.Value,
				Address2 = _address2.Value,
				City = _city.Value,
				StateId = _stateId.Value,
				PostalCode = _postalCode.Value,
				People = _people.Value
            });
        }

        PostBuild(BuilderObject.Value);

        return BuilderObject.Value;
    }


    //
    //  Default Constructor
    //

    public static PostalAddressBuilder Default()
    {
        return new PostalAddressBuilder();
    }

    //
    //  With Properties
    //

    public PostalAddressBuilder WithAddress1(int value)
    {
        return WithAddress1(() => value);
    }
    
    public PostalAddressBuilder WithAddress1(Func<int> func)
    {
        _address1 = new Lazy<int>(func);
        return this;
    }

    public PostalAddressBuilder SetDefaultAddress1(int newValue = default)
    {
		_address1 = new Lazy<int>(newValue);
        return this;
    }

    public PostalAddressBuilder WithAddress2(string value)
    {
        return WithAddress2(() => value);
    }
    
    public PostalAddressBuilder WithAddress2(Func<string> func)
    {
        _address2 = new Lazy<string>(func);
        return this;
    }

    public PostalAddressBuilder SetDefaultAddress2(string newValue = default)
    {
		_address2 = new Lazy<string>(newValue);
        return this;
    }

    public PostalAddressBuilder WithCity(string value)
    {
        return WithCity(() => value);
    }
    
    public PostalAddressBuilder WithCity(Func<string> func)
    {
        _city = new Lazy<string>(func);
        return this;
    }

    public PostalAddressBuilder SetDefaultCity(string newValue = default)
    {
		_city = new Lazy<string>(newValue);
        return this;
    }

    public PostalAddressBuilder WithStateId(int value)
    {
        return WithStateId(() => value);
    }
    
    public PostalAddressBuilder WithStateId(Func<int> func)
    {
        _stateId = new Lazy<int>(func);
        return this;
    }

    public PostalAddressBuilder SetDefaultStateId(int newValue = default)
    {
		_stateId = new Lazy<int>(newValue);
        return this;
    }

    public PostalAddressBuilder WithPostalCode(string value)
    {
        return WithPostalCode(() => value);
    }
    
    public PostalAddressBuilder WithPostalCode(Func<string> func)
    {
        _postalCode = new Lazy<string>(func);
        return this;
    }

    public PostalAddressBuilder SetDefaultPostalCode(string newValue = default)
    {
		_postalCode = new Lazy<string>(newValue);
        return this;
    }

    public PostalAddressBuilder WithPeople(List<string> value)
    {
        return WithPeople(() => value);
    }
    
    public PostalAddressBuilder WithPeople(Func<List<string>> func)
    {
        _people = new Lazy<List<string>>(func);
        return this;
    }

    public PostalAddressBuilder SetDefaultPeople(List<string> newValue = default)
    {
		_people = new Lazy<List<string>>(newValue);
        return this;
    }
}

#nullable restore
#pragma warning restore CS8625 // Cannot convert null literal to non-nullable reference type.
